package pqt.dss.bor.model.eo;

import java.math.BigDecimal;

import java.sql.SQLException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 28 15:00:48 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DssBranchOpenReqLineDtlImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        BrOpenReqLineDtlPk,
        BrOpenReqHeaderFk,
        Name,
        Designation,
        ValidationTarget,
        Qtr1,
        Qtr2,
        Qtr3,
        Qtr4,
        Total,
        UserIdFk,
        EnterDate,
        LastUpdatedBy,
        LastUpdatedDate,
        DssBranchOpenReqHeader;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int BROPENREQLINEDTLPK = AttributesEnum.BrOpenReqLineDtlPk.index();
    public static final int BROPENREQHEADERFK = AttributesEnum.BrOpenReqHeaderFk.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int DESIGNATION = AttributesEnum.Designation.index();
    public static final int VALIDATIONTARGET = AttributesEnum.ValidationTarget.index();
    public static final int QTR1 = AttributesEnum.Qtr1.index();
    public static final int QTR2 = AttributesEnum.Qtr2.index();
    public static final int QTR3 = AttributesEnum.Qtr3.index();
    public static final int QTR4 = AttributesEnum.Qtr4.index();
    public static final int TOTAL = AttributesEnum.Total.index();
    public static final int USERIDFK = AttributesEnum.UserIdFk.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int DSSBRANCHOPENREQHEADER = AttributesEnum.DssBranchOpenReqHeader.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DssBranchOpenReqLineDtlImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("pqt.dss.bor.model.eo.DssBranchOpenReqLineDtl");
    }


    /**
     * Gets the attribute value for BrOpenReqLineDtlPk, using the alias name BrOpenReqLineDtlPk.
     * @return the value of BrOpenReqLineDtlPk
     */
    public Number getBrOpenReqLineDtlPk() {
        return (Number) getAttributeInternal(BROPENREQLINEDTLPK);
    }

    /**
     * Sets <code>value</code> as the attribute value for BrOpenReqLineDtlPk.
     * @param value value to set the BrOpenReqLineDtlPk
     */
    public void setBrOpenReqLineDtlPk(Number value) {
        setAttributeInternal(BROPENREQLINEDTLPK, value);
    }

    /**
     * Gets the attribute value for BrOpenReqHeaderFk, using the alias name BrOpenReqHeaderFk.
     * @return the value of BrOpenReqHeaderFk
     */
    public Number getBrOpenReqHeaderFk() {
        return (Number) getAttributeInternal(BROPENREQHEADERFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for BrOpenReqHeaderFk.
     * @param value value to set the BrOpenReqHeaderFk
     */
    public void setBrOpenReqHeaderFk(Number value) {
        setAttributeInternal(BROPENREQHEADERFK, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for Designation, using the alias name Designation.
     * @return the value of Designation
     */
    public String getDesignation() {
        return (String) getAttributeInternal(DESIGNATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Designation.
     * @param value value to set the Designation
     */
    public void setDesignation(String value) {
        setAttributeInternal(DESIGNATION, value);
    }

    /**
     * Gets the attribute value for ValidationTarget, using the alias name ValidationTarget.
     * @return the value of ValidationTarget
     */
    public Number getValidationTarget() {
        return (Number) getAttributeInternal(VALIDATIONTARGET);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValidationTarget.
     * @param value value to set the ValidationTarget
     */
    public void setValidationTarget(Number value) {
        setAttributeInternal(VALIDATIONTARGET, value);
    }

    /**
     * Gets the attribute value for Qtr1, using the alias name Qtr1.
     * @return the value of Qtr1
     */
    public Number getQtr1() {
        return (Number) getAttributeInternal(QTR1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Qtr1.
     * @param value value to set the Qtr1
     */
    public void setQtr1(Number value) {
        setAttributeInternal(QTR1, value);
    }

    /**
     * Gets the attribute value for Qtr2, using the alias name Qtr2.
     * @return the value of Qtr2
     */
    public Number getQtr2() {
        return (Number) getAttributeInternal(QTR2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Qtr2.
     * @param value value to set the Qtr2
     */
    public void setQtr2(Number value) {
        setAttributeInternal(QTR2, value);
    }

    /**
     * Gets the attribute value for Qtr3, using the alias name Qtr3.
     * @return the value of Qtr3
     */
    public Number getQtr3() {
        return (Number) getAttributeInternal(QTR3);
    }

    /**
     * Sets <code>value</code> as the attribute value for Qtr3.
     * @param value value to set the Qtr3
     */
    public void setQtr3(Number value) {
        setAttributeInternal(QTR3, value);
    }

    /**
     * Gets the attribute value for Qtr4, using the alias name Qtr4.
     * @return the value of Qtr4
     */
    public Number getQtr4() {
        return (Number) getAttributeInternal(QTR4);
    }

    /**
     * Sets <code>value</code> as the attribute value for Qtr4.
     * @param value value to set the Qtr4
     */
    public void setQtr4(Number value) {
        setAttributeInternal(QTR4, value);
    }

    /**
     * Gets the attribute value for Total, using the alias name Total.
     * @return the value of Total
     */
    public Number getTotal() {
        return (Number) getAttributeInternal(TOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Total.
     * @param value value to set the Total
     */
    public void setTotal(Number value) {
        setAttributeInternal(TOTAL, value);
    }

    /**
     * Gets the attribute value for UserIdFk, using the alias name UserIdFk.
     * @return the value of UserIdFk
     */
    public Number getUserIdFk() {
        return (Number) getAttributeInternal(USERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserIdFk.
     * @param value value to set the UserIdFk
     */
    public void setUserIdFk(Number value) {
        setAttributeInternal(USERIDFK, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * @return the associated entity DssBranchOpenReqHeaderImpl.
     */
    public DssBranchOpenReqHeaderImpl getDssBranchOpenReqHeader() {
        return (DssBranchOpenReqHeaderImpl) getAttributeInternal(DSSBRANCHOPENREQHEADER);
    }

    /**
     * Sets <code>value</code> as the associated entity DssBranchOpenReqHeaderImpl.
     */
    public void setDssBranchOpenReqHeader(DssBranchOpenReqHeaderImpl value) {
        setAttributeInternal(DSSBRANCHOPENREQHEADER, value);
    }


    /**
     * @param brOpenReqLineDtlPk key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number brOpenReqLineDtlPk) {
        return new Key(new Object[] { brOpenReqLineDtlPk });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
      protected void create(AttributeList attributeList) {
          super.create(attributeList);
          Date currentDate = new Date();
          setEnterDate((Date) currentDate.getCurrentDate());
          setLastUpdatedDate((Date) currentDate.getCurrentDate());
          SequenceImpl seq = new SequenceImpl("dss_br_opn_req_line_dtl_seq", getDBTransaction());
          setBrOpenReqLineDtlPk(seq.getSequenceNumber());
          
//          setBranchStatus("INCOMPLETE");
//          setDssStatus("INCOMPLETE");
          
          FacesContext fctx = FacesContext.getCurrentInstance();
          ExternalContext ectx = fctx.getExternalContext();
          HttpSession userSession = (HttpSession) ectx.getSession(false);
          try {
              setUserIdFk(new Number(userSession.getAttribute("pUserId")));
              setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
          } catch (SQLException ex) {
              setUserIdFk(new Number(0));
              setLastUpdatedBy(new Number(0));
          }
      }


    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Date currentDate = new Date();
        if (operation == DML_UPDATE) {
            setLastUpdatedDate((Date) currentDate.getCurrentDate());
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession) ectx.getSession(false);
            try {
                setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
            } catch (SQLException ex) {
                setUserIdFk(new Number(0));
                setLastUpdatedBy(new Number(0));
            }
        }
        super.doDML(operation, e);
    }
}

