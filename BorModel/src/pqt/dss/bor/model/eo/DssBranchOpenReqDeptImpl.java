package pqt.dss.bor.model.eo;

import java.sql.SQLException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 30 20:17:57 PKT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DssBranchOpenReqDeptImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        BorDeptIdPk,
        DepartmentIdFk,
        Quantity,
        ItemSize,
        ItemRate,
        BorHdrIdFk,
        UserIdFk,
        EnterDate,
        LastUpdatedBy,
        LastUpdatedDate,
        ItemIdFk,
        Total,
        DssBranchOpenReqHeader;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int BORDEPTIDPK = AttributesEnum.BorDeptIdPk.index();
    public static final int DEPARTMENTIDFK = AttributesEnum.DepartmentIdFk.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();
    public static final int ITEMSIZE = AttributesEnum.ItemSize.index();
    public static final int ITEMRATE = AttributesEnum.ItemRate.index();
    public static final int BORHDRIDFK = AttributesEnum.BorHdrIdFk.index();
    public static final int USERIDFK = AttributesEnum.UserIdFk.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int ITEMIDFK = AttributesEnum.ItemIdFk.index();
    public static final int TOTAL = AttributesEnum.Total.index();
    public static final int DSSBRANCHOPENREQHEADER = AttributesEnum.DssBranchOpenReqHeader.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DssBranchOpenReqDeptImpl() {
    }

    /**
     * Gets the attribute value for BorDeptIdPk, using the alias name BorDeptIdPk.
     * @return the value of BorDeptIdPk
     */
    public Number getBorDeptIdPk() {
        return (Number) getAttributeInternal(BORDEPTIDPK);
    }

    /**
     * Sets <code>value</code> as the attribute value for BorDeptIdPk.
     * @param value value to set the BorDeptIdPk
     */
    public void setBorDeptIdPk(Number value) {
        setAttributeInternal(BORDEPTIDPK, value);
    }

    /**
     * Gets the attribute value for DepartmentIdFk, using the alias name DepartmentIdFk.
     * @return the value of DepartmentIdFk
     */
    public Number getDepartmentIdFk() {
        return (Number) getAttributeInternal(DEPARTMENTIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentIdFk.
     * @param value value to set the DepartmentIdFk
     */
    public void setDepartmentIdFk(Number value) {
        setAttributeInternal(DEPARTMENTIDFK, value);
    }

    /**
     * Gets the attribute value for Quantity, using the alias name Quantity.
     * @return the value of Quantity
     */
    public Number getQuantity() {
        return (Number) getAttributeInternal(QUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quantity.
     * @param value value to set the Quantity
     */
    public void setQuantity(Number value) {
        setAttributeInternal(QUANTITY, value);
    }

    /**
     * Gets the attribute value for ItemSize, using the alias name ItemSize.
     * @return the value of ItemSize
     */
    public String getItemSize() {
        return (String) getAttributeInternal(ITEMSIZE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemSize.
     * @param value value to set the ItemSize
     */
    public void setItemSize(String value) {
        setAttributeInternal(ITEMSIZE, value);
    }

    /**
     * Gets the attribute value for ItemRate, using the alias name ItemRate.
     * @return the value of ItemRate
     */
    public Number getItemRate() {
        return (Number) getAttributeInternal(ITEMRATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemRate.
     * @param value value to set the ItemRate
     */
    public void setItemRate(Number value) {
        setAttributeInternal(ITEMRATE, value);
    }

    /**
     * Gets the attribute value for BorHdrIdFk, using the alias name BorHdrIdFk.
     * @return the value of BorHdrIdFk
     */
    public Number getBorHdrIdFk() {
        return (Number) getAttributeInternal(BORHDRIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for BorHdrIdFk.
     * @param value value to set the BorHdrIdFk
     */
    public void setBorHdrIdFk(Number value) {
        setAttributeInternal(BORHDRIDFK, value);
    }

    /**
     * Gets the attribute value for UserIdFk, using the alias name UserIdFk.
     * @return the value of UserIdFk
     */
    public Number getUserIdFk() {
        return (Number) getAttributeInternal(USERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserIdFk.
     * @param value value to set the UserIdFk
     */
    public void setUserIdFk(Number value) {
        setAttributeInternal(USERIDFK, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for ItemIdFk, using the alias name ItemIdFk.
     * @return the value of ItemIdFk
     */
    public Number getItemIdFk() {
        return (Number) getAttributeInternal(ITEMIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemIdFk.
     * @param value value to set the ItemIdFk
     */
    public void setItemIdFk(Number value) {
        setAttributeInternal(ITEMIDFK, value);
    }

    /**
     * Gets the attribute value for Total, using the alias name Total.
     * @return the value of Total
     */
    public Number getTotal() {
        return (Number) getAttributeInternal(TOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Total.
     * @param value value to set the Total
     */
    public void setTotal(Number value) {
        setAttributeInternal(TOTAL, value);
    }

    /**
     * @return the associated entity DssBranchOpenReqHeaderImpl.
     */
    public DssBranchOpenReqHeaderImpl getDssBranchOpenReqHeader() {
        return (DssBranchOpenReqHeaderImpl) getAttributeInternal(DSSBRANCHOPENREQHEADER);
    }

    /**
     * Sets <code>value</code> as the associated entity DssBranchOpenReqHeaderImpl.
     */
    public void setDssBranchOpenReqHeader(DssBranchOpenReqHeaderImpl value) {
        setAttributeInternal(DSSBRANCHOPENREQHEADER, value);
    }

    /**
     * @param borDeptIdPk key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number borDeptIdPk) {
        return new Key(new Object[] { borDeptIdPk });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("pqt.dss.bor.model.eo.DssBranchOpenReqDept");
    }

     /**
      * Add attribute defaulting logic in this method.
      * @param attributeList list of attribute names/values to initialize the row
      */
      protected void create(AttributeList attributeList) {
          super.create(attributeList);
          Date currentDate = new Date();
          setEnterDate((Date) currentDate.getCurrentDate());
          setLastUpdatedDate((Date) currentDate.getCurrentDate());
          SequenceImpl seq = new SequenceImpl("DSS_BRANCH_OPEN_REQ_DEPT_SEQ", getDBTransaction());
          setBorDeptIdPk(seq.getSequenceNumber());
          
     //         setBranchStatus("INCOMPLETE");
     //         setDssStatus("INCOMPLETE");
          
          FacesContext fctx = FacesContext.getCurrentInstance();
          ExternalContext ectx = fctx.getExternalContext();
          HttpSession userSession = (HttpSession) ectx.getSession(false);
          try {
              setUserIdFk(new Number(userSession.getAttribute("pUserId")));
              setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
          } catch (SQLException ex) {
              setUserIdFk(new Number(0));
              setLastUpdatedBy(new Number(0));
          }
      }


    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Date currentDate = new Date();
        if (operation == DML_UPDATE) {
            setLastUpdatedDate((Date) currentDate.getCurrentDate());
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession) ectx.getSession(false);
            try {
                setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
            } catch (SQLException ex) {
                setUserIdFk(new Number(0));
                setLastUpdatedBy(new Number(0));
            }
        }
        super.doDML(operation, e);
    }
}

