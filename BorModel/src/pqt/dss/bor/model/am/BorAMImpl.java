package pqt.dss.bor.model.am;

import java.sql.SQLException;

import java.sql.Types;

import javax.faces.application.FacesMessage;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import javax.sound.sampled.Line;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.model.binding.DCIteratorBinding;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;

import oracle.jbo.domain.Number;


import oracle.jbo.server.DBTransaction;

import oracle.jdbc.internal.OracleCallableStatement;

import pqt.dss.bor.model.am.common.BorAM;
import pqt.dss.bor.model.vo.DssBranchOpenReqHeaderViewImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 16 19:14:28 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BorAMImpl extends ApplicationModuleImpl implements BorAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BorAMImpl() {
    }

    public void Apply() {
        if (getDBTransaction().isDirty()) {
            getDBTransaction().commit();
            FacesMessage Message = new FacesMessage("Record Saved Successfully!");
            Message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, Message);
        }
    }

    public void Rollback() {
        getDBTransaction().rollback();
    }

    public void DeleteCommit() {
        if (getDBTransaction().isDirty()) {
            getDBTransaction().commit();
            FacesMessage Message = new FacesMessage("Record has been deleted Successfully!");
            Message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, Message);
        }
    }


    /**
     * Container's getter for DssBranchOpenReqHeaderView1.
     * @return DssBranchOpenReqHeaderView1
     */
    public DssBranchOpenReqHeaderViewImpl getDssBranchOpenReqHeaderView1() {
        return (DssBranchOpenReqHeaderViewImpl) findViewObject("DssBranchOpenReqHeaderView1");
    }

    /**
     * Container's getter for DssBranchOpenReqCompanyView2.
     * @return DssBranchOpenReqCompanyView2
     */
    public ViewObjectImpl getDssBranchOpenReqCompanyView2() {
        return (ViewObjectImpl) findViewObject("DssBranchOpenReqCompanyView2");
    }

    /**
     * Container's getter for BranchOpenReqFkLink1.
     * @return BranchOpenReqFkLink1
     */
    public ViewLinkImpl getBranchOpenReqFkLink1() {
        return (ViewLinkImpl) findViewLink("BranchOpenReqFkLink1");
    }

    /**
     * Container's getter for DssBranchOpenReqLineView1.
     * @return DssBranchOpenReqLineView1
     */
    public ViewObjectImpl getDssBranchOpenReqLineView1() {
        return (ViewObjectImpl) findViewObject("DssBranchOpenReqLineView1");
    }

    /**
     * Container's getter for DssBranchOpenReqLineFkLink1.
     * @return DssBranchOpenReqLineFkLink1
     */
    public ViewLinkImpl getDssBranchOpenReqLineFkLink1() {
        return (ViewLinkImpl) findViewLink("DssBranchOpenReqLineFkLink1");
    }

    /**
     * Container's getter for DssBranchOpenReqLineDtlView1.
     * @return DssBranchOpenReqLineDtlView1
     */
    public pqt.dss.bor.model.vo.DssBranchOpenReqLineDtlViewImpl getDssBranchOpenReqLineDtlView1() {
        return (pqt.dss.bor.model.vo.DssBranchOpenReqLineDtlViewImpl) findViewObject("DssBranchOpenReqLineDtlView1");
    }

    /**
     * Container's getter for DssBranchOpenReqLineDtlFkLink1.
     * @return DssBranchOpenReqLineDtlFkLink1
     */
    public ViewLinkImpl getDssBranchOpenReqLineDtlFkLink1() {
        return (ViewLinkImpl) findViewLink("DssBranchOpenReqLineDtlFkLink1");
    }

    /**
     * Container's getter for DssBrOpnReqDtlResultView1.
     * @return DssBrOpnReqDtlResultView1
     */
    public ViewObjectImpl getDssBrOpnReqDtlResultView1() {
        return (ViewObjectImpl) findViewObject("DssBrOpnReqDtlResultView1");
    }

    /**
     * Container's getter for DssBranchOpenReqDtlResultFkLink1.
     * @return DssBranchOpenReqDtlResultFkLink1
     */
    public ViewLinkImpl getDssBranchOpenReqDtlResultFkLink1() {
        return (ViewLinkImpl) findViewLink("DssBranchOpenReqDtlResultFkLink1");
    }

    /**
     * Container's getter for CompanySetupVO1.
     * @return CompanySetupVO1
     */
    public ViewObjectImpl getCompanySetupVO1() {
        return (ViewObjectImpl) findViewObject("CompanySetupVO1");
    }

    public void popCompanies() {
        ViewObject LineVO = getDssBranchOpenReqCompanyView2();
        ViewObject CompanyVO = getCompanySetupVO1();
        CompanyVO.executeQuery();
        LineVO.first();
        System.out.println(CompanyVO.getRowCount());
        CompanyVO.first();
        //Row rows[] = CompanyVO.getAllRowsInRange();
        //System.out.println(rows.length);
        for (int i = 0; i < CompanyVO.getRowCount(); i++) {
            Row r = LineVO.createRow();
            LineVO.insertRow(r);
            LineVO.setCurrentRow(r);
            LineVO.getCurrentRow().setAttribute("CompanyIdFk",
                                                CompanyVO.getCurrentRow().getAttribute("CompanyIdPk").toString());
            LineVO.getCurrentRow().setAttribute("CompanyName",
                                                CompanyVO.getCurrentRow().getAttribute("CompanyName").toString());
            CompanyVO.next();
        }
    }

    public void getResults() {
        ViewObject ResultVO = getDssBrOpnReqDtlResultView1();
        if (ResultVO.getRowCount() < 2) {
            Row r1 = ResultVO.createRow();
            r1.setAttribute("RowType", "Validation Target");
            ResultVO.insertRow(r1);

            Row r2 = ResultVO.createRow();
            r2.setAttribute("RowType", "Results Achieved");
            ResultVO.insertRow(r2);

        }
    }

    public void callWorkflow(Number p_document_id, String ApprovalType) {
        NUMBER vNotifId;
        Number p_wf_notif_id = null, p_wf_setup_id = null, p_form_id = null, p_from_user_id = null;
        String p_notification_message = "Approval Required for Branch Opening.", p_status = null;

        ViewObject WfVO = this.getWfSetupDetailVO1();
        WfVO.setWhereClause("WORKFLOW_TYPE='" + ApprovalType + "'");
        WfVO.executeQuery();
        if (WfVO.getRowCount() == 0) {
            throw new JboException("Workflow Hierarchy does not exists.");
        } else if (WfVO.getRowCount() > 1) {
            throw new JboException("Multiple Workflow Hierarchy exists.");
        } else if (WfVO.getRowCount() == 1) {
            p_wf_setup_id = (Number) WfVO.first().getAttribute(0);
            p_form_id = (Number) WfVO.first().getAttribute(1);

            ViewObject vo = this.getDssBranchOpenReqHeaderView1();
            if (vo.getRowCount() == 0) {
                throw new JboException("Please select Agent For Visiting Card Request.");
            } else if (vo.getRowCount() > 0) {
                ViewObject FU = this.getFromUserVO1();
                FU.setWhereClause("USER_ID_PK = " + vo.first().getAttribute("UserIdFk"));
                System.out.println(FU.getQuery());
                FU.executeQuery();
                if (FU.getRowCount() == 1) {
                    p_from_user_id = (Number) vo.first().getAttribute("UserIdFk");
                } else if (FU.getRowCount() == 0) {
                    throw new JboException("Manager does not exists.");
                } else if (FU.getRowCount() > 1) {
                    throw new JboException("Multiple Manager exists.");
                }
            }

            DBTransaction txn = getDBTransaction();
            OracleCallableStatement callableStatement = null;
            if ("BRANCH".equalsIgnoreCase(ApprovalType))
                callableStatement =
                    (OracleCallableStatement) txn.createCallableStatement("BEGIN DSS_SWF_PKG.CALL_WORKFLOW(:1, :2, :3, :4, :5, :6, :7, :8); END;",
                                                                          DBTransaction.DEFAULT);
            else if ("DSS".equalsIgnoreCase(ApprovalType))
                callableStatement =
                    (OracleCallableStatement) txn.createCallableStatement("BEGIN DSS_SWF_PKG.CALL_DSS_WORKFLOW(:1, :2, :3, :4, :5, :6, :7, :8); END;",
                                                                          DBTransaction.DEFAULT);
            try {
                callableStatement.setNUMBER(1, (NUMBER) p_document_id);
                callableStatement.setNUMBER(2, (NUMBER) p_wf_notif_id);
                callableStatement.setNUMBER(3, (NUMBER) p_wf_setup_id);
                callableStatement.setNUMBER(4, p_form_id);
                callableStatement.setNUMBER(5, p_from_user_id);
                callableStatement.setString(6, p_notification_message);
                callableStatement.setString(7, p_status);
                callableStatement.registerOutParameter(8, Types.NUMERIC);

                callableStatement.execute();
                vNotifId = callableStatement.getNUMBER(8);
                callableStatement.close();
                if (vNotifId != null) {
                    if ("BRANCH".equalsIgnoreCase(ApprovalType)) {
                        this.getDssBranchOpenReqHeaderView1().getCurrentRow().setAttribute("BranchStatus", "INPROCESS");
                        this.getDssBranchOpenReqHeaderView1().getCurrentRow().setAttribute("BranchNotifIdFk", vNotifId);
                    } else if ("DSS".equalsIgnoreCase(ApprovalType)) {
                        this.getDssBranchOpenReqHeaderView1().getCurrentRow().setAttribute("DssStatus", "INPROCESS");
                        this.getDssBranchOpenReqHeaderView1().getCurrentRow().setAttribute("DssNotifIdFk", vNotifId);
                    }
                    getDBTransaction().commit();
                }
            } catch (SQLException e) {
                throw new JboException(e.getMessage());
            }
        }
        this.getDssBranchOpenReqHeaderView1().executeQuery();
    }

    public void DssApprove() {
        ViewObject vo = this.getDssBranchOpenReqHeaderView1();
        vo.getCurrentRow().setAttribute("DssStatus", "APPROVED");
        getDBTransaction().commit();
    }

    /**
     * Container's getter for FromUserVO1.
     * @return FromUserVO1
     */
    public ViewObjectImpl getFromUserVO1() {
        return (ViewObjectImpl) findViewObject("FromUserVO1");
    }

    /**
     * Container's getter for WfSetupDetailVO1.
     * @return WfSetupDetailVO1
     */
    public ViewObjectImpl getWfSetupDetailVO1() {
        return (ViewObjectImpl) findViewObject("WfSetupDetailVO1");
    }

    public void callBORWorkflow(Number p_document_id) {
        String vStatus = null, vMsg = null;

        DBTransaction txn = getDBTransaction();
        OracleCallableStatement callableStatement = null;

        callableStatement =
            (OracleCallableStatement) txn.createCallableStatement("BEGIN dss_all_pkg.call_bor_workflow(:1, :2, :3); END;",
                                                                  DBTransaction.DEFAULT);

        try {
            callableStatement.setNUMBER(1, (NUMBER) p_document_id);
            callableStatement.registerOutParameter(2, Types.VARCHAR);
            callableStatement.registerOutParameter(3, Types.VARCHAR);

            callableStatement.execute();

            vStatus = callableStatement.getString(2);
            vMsg = callableStatement.getString(3);

            callableStatement.close();
        } catch (SQLException e) {
            try {
                callableStatement.close();
            } catch (SQLException f) {
            }
            throw new JboException(e.getMessage());
        }

        FacesMessage Message = new FacesMessage(vMsg);
        if (vStatus.equalsIgnoreCase("N"))
            Message.setSeverity(FacesMessage.SEVERITY_ERROR);
        else
            Message.setSeverity(FacesMessage.SEVERITY_INFO);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, Message);
        txn.rollback();
    }

    /**
     * Container's getter for DssBranchOpenReqDeptView1.
     * @return DssBranchOpenReqDeptView1
     */
    public ViewObjectImpl getDssBranchOpenReqDeptView1() {
        return (ViewObjectImpl) findViewObject("DssBranchOpenReqDeptView1");
    }

    /**
     * Container's getter for DssBrOpenReqDeptFkLink1.
     * @return DssBrOpenReqDeptFkLink1
     */
    public ViewLinkImpl getDssBrOpenReqDeptFkLink1() {
        return (ViewLinkImpl) findViewLink("DssBrOpenReqDeptFkLink1");
    }

    public void setUserSession() {
        FacesContext fctx = FacesContext.getCurrentInstance();
        ExternalContext ectx = fctx.getExternalContext();
        HttpSession userSession = (HttpSession) ectx.getSession(false);
        userSession.setAttribute("SSV_UserDept", 3);
    }
}


